{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled7.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyP+kgmMqN+vmR+7dAssvu5O",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MehrdadJalali-KIT/Instrument_Collaboration/blob/main/GCN-MOF\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "DDi3Ez7gnAbj",
        "outputId": "6dd8f1d3-5d53-4f74-a817-d666526c70ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StellarGraph: Undirected multigraph\n",
            " Nodes: 1785, Edges: 48524\n",
            "\n",
            " Node types:\n",
            "  default: [1785]\n",
            "    Features: none\n",
            "    Edge types: default-default->default\n",
            "\n",
            " Edge types:\n",
            "    default-default->default: [48524]\n",
            "        Weights: all 1 (default)\n",
            "        Features: none\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 1999 entries, 0 to 1998\n",
            "Data columns (total 10 columns):\n",
            " #   Column   Non-Null Count  Dtype \n",
            "---  ------   --------------  ----- \n",
            " 0   f1       1999 non-null   object\n",
            " 1   f2       1999 non-null   object\n",
            " 2   f3       1999 non-null   object\n",
            " 3   f4       1999 non-null   object\n",
            " 4   f5       1999 non-null   object\n",
            " 5   f6       1999 non-null   object\n",
            " 6   f7       1999 non-null   object\n",
            " 7   f8       1999 non-null   object\n",
            " 8   f9       1999 non-null   object\n",
            " 9   subject  1999 non-null   object\n",
            "dtypes: object(10)\n",
            "memory usage: 171.8+ KB\n",
            "None\n",
            "Using GCN (local pooling) filters...\n",
            "Epoch 1/100\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(Adam, self).__init__(name, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 - 2s - loss: 1.1489 - acc: 0.1222 - val_loss: 1.1513 - val_acc: 0.1211 - 2s/epoch - 2s/step\n",
            "Epoch 2/100\n",
            "1/1 - 0s - loss: 1.1614 - acc: 0.1222 - val_loss: 1.1281 - val_acc: 0.1211 - 85ms/epoch - 85ms/step\n",
            "Epoch 3/100\n",
            "1/1 - 0s - loss: 1.1142 - acc: 0.1222 - val_loss: 1.1086 - val_acc: 0.1211 - 93ms/epoch - 93ms/step\n",
            "Epoch 4/100\n",
            "1/1 - 0s - loss: 1.1143 - acc: 0.1222 - val_loss: 1.0907 - val_acc: 0.8632 - 95ms/epoch - 95ms/step\n",
            "Epoch 5/100\n",
            "1/1 - 0s - loss: 1.0784 - acc: 0.7422 - val_loss: 1.0747 - val_acc: 0.7421 - 92ms/epoch - 92ms/step\n",
            "Epoch 6/100\n",
            "1/1 - 0s - loss: 1.0729 - acc: 0.7422 - val_loss: 1.0604 - val_acc: 0.7421 - 117ms/epoch - 117ms/step\n",
            "Epoch 7/100\n",
            "1/1 - 0s - loss: 1.0627 - acc: 0.7422 - val_loss: 1.0473 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 8/100\n",
            "1/1 - 0s - loss: 1.0498 - acc: 0.7422 - val_loss: 1.0359 - val_acc: 0.7421 - 82ms/epoch - 82ms/step\n",
            "Epoch 9/100\n",
            "1/1 - 0s - loss: 1.0363 - acc: 0.7422 - val_loss: 1.0291 - val_acc: 0.7421 - 92ms/epoch - 92ms/step\n",
            "Epoch 10/100\n",
            "1/1 - 0s - loss: 1.0291 - acc: 0.7422 - val_loss: 1.0219 - val_acc: 0.7421 - 91ms/epoch - 91ms/step\n",
            "Epoch 11/100\n",
            "1/1 - 0s - loss: 1.0219 - acc: 0.7422 - val_loss: 1.0149 - val_acc: 0.7421 - 90ms/epoch - 90ms/step\n",
            "Epoch 12/100\n",
            "1/1 - 0s - loss: 1.0148 - acc: 0.7422 - val_loss: 1.0079 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 13/100\n",
            "1/1 - 0s - loss: 1.0058 - acc: 0.7422 - val_loss: 1.0004 - val_acc: 0.7421 - 83ms/epoch - 83ms/step\n",
            "Epoch 14/100\n",
            "1/1 - 0s - loss: 0.9998 - acc: 0.7422 - val_loss: 0.9928 - val_acc: 0.7421 - 84ms/epoch - 84ms/step\n",
            "Epoch 15/100\n",
            "1/1 - 0s - loss: 0.9922 - acc: 0.7422 - val_loss: 0.9848 - val_acc: 0.7421 - 91ms/epoch - 91ms/step\n",
            "Epoch 16/100\n",
            "1/1 - 0s - loss: 0.9876 - acc: 0.7422 - val_loss: 0.9763 - val_acc: 0.7421 - 85ms/epoch - 85ms/step\n",
            "Epoch 17/100\n",
            "1/1 - 0s - loss: 0.9757 - acc: 0.7422 - val_loss: 0.9676 - val_acc: 0.7421 - 104ms/epoch - 104ms/step\n",
            "Epoch 18/100\n",
            "1/1 - 0s - loss: 0.9813 - acc: 0.7422 - val_loss: 0.9588 - val_acc: 0.7421 - 84ms/epoch - 84ms/step\n",
            "Epoch 19/100\n",
            "1/1 - 0s - loss: 0.9565 - acc: 0.7422 - val_loss: 0.9497 - val_acc: 0.7421 - 93ms/epoch - 93ms/step\n",
            "Epoch 20/100\n",
            "1/1 - 0s - loss: 0.9451 - acc: 0.7422 - val_loss: 0.9404 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 21/100\n",
            "1/1 - 0s - loss: 0.9433 - acc: 0.7422 - val_loss: 0.9308 - val_acc: 0.7421 - 91ms/epoch - 91ms/step\n",
            "Epoch 22/100\n",
            "1/1 - 0s - loss: 0.9286 - acc: 0.7422 - val_loss: 0.9205 - val_acc: 0.7421 - 99ms/epoch - 99ms/step\n",
            "Epoch 23/100\n",
            "1/1 - 0s - loss: 0.9188 - acc: 0.7422 - val_loss: 0.9069 - val_acc: 0.7421 - 90ms/epoch - 90ms/step\n",
            "Epoch 24/100\n",
            "1/1 - 0s - loss: 0.9160 - acc: 0.7422 - val_loss: 0.8942 - val_acc: 0.7421 - 97ms/epoch - 97ms/step\n",
            "Epoch 25/100\n",
            "1/1 - 0s - loss: 0.9078 - acc: 0.7422 - val_loss: 0.8807 - val_acc: 0.7421 - 95ms/epoch - 95ms/step\n",
            "Epoch 26/100\n",
            "1/1 - 0s - loss: 0.9008 - acc: 0.7422 - val_loss: 0.8669 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 27/100\n",
            "1/1 - 0s - loss: 0.8530 - acc: 0.7422 - val_loss: 0.8528 - val_acc: 0.7421 - 91ms/epoch - 91ms/step\n",
            "Epoch 28/100\n",
            "1/1 - 0s - loss: 0.8602 - acc: 0.7422 - val_loss: 0.8388 - val_acc: 0.7421 - 96ms/epoch - 96ms/step\n",
            "Epoch 29/100\n",
            "1/1 - 0s - loss: 0.8592 - acc: 0.7422 - val_loss: 0.8248 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 30/100\n",
            "1/1 - 0s - loss: 0.8102 - acc: 0.7422 - val_loss: 0.8113 - val_acc: 0.7421 - 93ms/epoch - 93ms/step\n",
            "Epoch 31/100\n",
            "1/1 - 0s - loss: 0.8064 - acc: 0.7422 - val_loss: 0.7989 - val_acc: 0.7421 - 92ms/epoch - 92ms/step\n",
            "Epoch 32/100\n",
            "1/1 - 0s - loss: 0.7914 - acc: 0.7422 - val_loss: 0.7872 - val_acc: 0.7421 - 103ms/epoch - 103ms/step\n",
            "Epoch 33/100\n",
            "1/1 - 0s - loss: 0.8158 - acc: 0.7422 - val_loss: 0.7767 - val_acc: 0.7421 - 95ms/epoch - 95ms/step\n",
            "Epoch 34/100\n",
            "1/1 - 0s - loss: 0.7875 - acc: 0.7422 - val_loss: 0.7674 - val_acc: 0.7421 - 86ms/epoch - 86ms/step\n",
            "Epoch 35/100\n",
            "1/1 - 0s - loss: 0.7418 - acc: 0.7422 - val_loss: 0.7597 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 36/100\n",
            "1/1 - 0s - loss: 0.7446 - acc: 0.7422 - val_loss: 0.7539 - val_acc: 0.7421 - 94ms/epoch - 94ms/step\n",
            "Epoch 37/100\n",
            "1/1 - 0s - loss: 0.7931 - acc: 0.7422 - val_loss: 0.7505 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 38/100\n",
            "1/1 - 0s - loss: 0.7594 - acc: 0.7422 - val_loss: 0.7492 - val_acc: 0.7421 - 88ms/epoch - 88ms/step\n",
            "Epoch 39/100\n",
            "1/1 - 0s - loss: 0.7383 - acc: 0.7422 - val_loss: 0.7497 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 40/100\n",
            "1/1 - 0s - loss: 0.7216 - acc: 0.7422 - val_loss: 0.7514 - val_acc: 0.7421 - 94ms/epoch - 94ms/step\n",
            "Epoch 41/100\n",
            "1/1 - 0s - loss: 0.8099 - acc: 0.7422 - val_loss: 0.7535 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 42/100\n",
            "1/1 - 0s - loss: 0.7283 - acc: 0.7422 - val_loss: 0.7555 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 43/100\n",
            "1/1 - 0s - loss: 0.7398 - acc: 0.7422 - val_loss: 0.7572 - val_acc: 0.7421 - 88ms/epoch - 88ms/step\n",
            "Epoch 44/100\n",
            "1/1 - 0s - loss: 0.7429 - acc: 0.7422 - val_loss: 0.7583 - val_acc: 0.7421 - 101ms/epoch - 101ms/step\n",
            "Epoch 45/100\n",
            "1/1 - 0s - loss: 0.7350 - acc: 0.7422 - val_loss: 0.7584 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 46/100\n",
            "1/1 - 0s - loss: 0.7688 - acc: 0.7422 - val_loss: 0.7576 - val_acc: 0.7421 - 88ms/epoch - 88ms/step\n",
            "Epoch 47/100\n",
            "1/1 - 0s - loss: 0.7599 - acc: 0.7422 - val_loss: 0.7560 - val_acc: 0.7421 - 97ms/epoch - 97ms/step\n",
            "Epoch 48/100\n",
            "1/1 - 0s - loss: 0.7448 - acc: 0.7422 - val_loss: 0.7538 - val_acc: 0.7421 - 95ms/epoch - 95ms/step\n",
            "Epoch 49/100\n",
            "1/1 - 0s - loss: 0.7571 - acc: 0.7422 - val_loss: 0.7513 - val_acc: 0.7421 - 87ms/epoch - 87ms/step\n",
            "Epoch 50/100\n",
            "1/1 - 0s - loss: 0.7726 - acc: 0.7422 - val_loss: 0.7487 - val_acc: 0.7421 - 90ms/epoch - 90ms/step\n",
            "Epoch 51/100\n",
            "1/1 - 0s - loss: 0.7772 - acc: 0.7422 - val_loss: 0.7462 - val_acc: 0.7421 - 90ms/epoch - 90ms/step\n",
            "Epoch 52/100\n",
            "1/1 - 0s - loss: 0.7347 - acc: 0.7422 - val_loss: 0.7444 - val_acc: 0.7421 - 89ms/epoch - 89ms/step\n",
            "Epoch 53/100\n",
            "1/1 - 0s - loss: 0.7799 - acc: 0.7422 - val_loss: 0.7429 - val_acc: 0.7421 - 86ms/epoch - 86ms/step\n",
            "Epoch 54/100\n",
            "1/1 - 0s - loss: 0.7607 - acc: 0.7422 - val_loss: 0.7419 - val_acc: 0.7421 - 88ms/epoch - 88ms/step\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 1.0898 - acc: 0.8889\n",
            "\n",
            "Test Set Metrics:\n",
            "\tloss: 1.0898\n",
            "\tacc: 0.8889\n",
            "WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f9a83dcb7a0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
            "     Predicted True\n",
            "0            1    1\n",
            "1            1    1\n",
            "2            1    1\n",
            "3            1    1\n",
            "4            1    1\n",
            "...        ...  ...\n",
            "1994         1    1\n",
            "1995         1    1\n",
            "1996         1    1\n",
            "1997         1    1\n",
            "1998         1    1\n",
            "\n",
            "[1999 rows x 2 columns]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 504x576 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "import csv\n",
        "\n",
        "import stellargraph as sg\n",
        "from stellargraph import StellarGraph\n",
        "from stellargraph.mapper import FullBatchNodeGenerator\n",
        "from stellargraph.layer import GCN\n",
        "import networkx as nx\n",
        "\n",
        "from tensorflow.keras import layers, optimizers, losses, metrics, Model\n",
        "from sklearn import preprocessing, model_selection\n",
        "from IPython.display import display, HTML\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "rsize=2000\n",
        "csize=2000\n",
        "\n",
        "\n",
        "\n",
        "with open('/content/drive/MyDrive/MOF/MOFSMILES/List_METAL_6000.csv', 'r') as nodecsv: # Open the file\n",
        "    nodereader = csv.reader(nodecsv) # Read the csv\n",
        "    # Retrieve the data (using Python list comprhension and list slicing to remove the header row, see footnote 3)\n",
        "    edges = [n for n in nodereader]\n",
        "  \n",
        "    node_Source = [n[0] for n in edges] \n",
        "    node_Target = [n[1] for n in edges] \n",
        "\n",
        "square_edges = pd.DataFrame(\n",
        "    {\"source\": node_Source , \"target\": node_Target}\n",
        ")\n",
        "\n",
        "square = StellarGraph(edges=square_edges)\n",
        "\n",
        "print(square.info())\n",
        "\n",
        "\n",
        "with open('/content/drive/MyDrive/MOF/MOFSMILES/Feature_6000.csv', 'r') as nodecsv: # Open the file\n",
        "    nodereader = csv.reader(nodecsv) # Read the csv\n",
        "    # Retrieve the data (using Python list comprhension and list slicing to remove the header row, see footnote 3)\n",
        "    nodes = [n for n in nodereader][1:rsize+1]\n",
        "    node_index = [n[0] for n in nodes] \n",
        "    node_Feature1 = [n[1] for n in nodes] \n",
        "    node_Feature2 = [n[2] for n in nodes] \n",
        "    node_Feature3 = [n[3] for n in nodes] \n",
        "    node_Feature4 = [n[4] for n in nodes] \n",
        "    node_Feature5 = [n[5] for n in nodes] \n",
        "    node_Feature6 = [n[6] for n in nodes] \n",
        "    node_Feature7 = [n[7] for n in nodes] \n",
        "    node_Feature8 = [n[8] for n in nodes] \n",
        "    node_Feature9 = [n[9] for n in nodes] \n",
        "    node_subject = [n[10] for n in nodes] \n",
        "    node_subjects=pd.Series(node_subject)\n",
        "\n",
        "    \n",
        "square_node_data = pd.DataFrame(\n",
        "    {\"f1\": node_Feature1,\"f2\":node_Feature2,\"f3\":node_Feature3,\"f4\":node_Feature4,\"f5\":node_Feature5,\"f6\":node_Feature6,\"f7\":node_Feature7,\"f8\":node_Feature8,\"f9\":node_Feature9,\"subject\":node_subject}, index= node_index )\n",
        "\n",
        "square_node_features = StellarGraph(square_node_data, square_edges)\n",
        "print(square_node_data.info())   \n",
        "\n",
        "\n",
        " \n",
        "G = nx.Graph()\n",
        "\n",
        "G= StellarGraph(\n",
        "    nodes=square_node_data, edges=square_edges\n",
        ")\n",
        "  \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "node_subjects.value_counts().to_frame()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "train_subjects, test_subjects = model_selection.train_test_split(\n",
        "    node_subjects, train_size=1800, test_size=199, stratify=node_subjects\n",
        ")\n",
        "val_subjects, test_subjects = model_selection.train_test_split(\n",
        "    test_subjects, train_size=190, test_size=9, stratify=test_subjects\n",
        ")\n",
        "\n",
        "train_subjects.value_counts().to_frame()\n",
        "\n",
        "target_encoding = preprocessing.LabelBinarizer()\n",
        "\n",
        "train_targets = target_encoding.fit_transform(train_subjects)\n",
        "val_targets = target_encoding.transform(val_subjects)\n",
        "\n",
        "test_targets = target_encoding.transform(test_subjects)\n",
        "\n",
        "generator = FullBatchNodeGenerator(G, method=\"gcn\")\n",
        "\n",
        "\n",
        "train_gen = generator.flow(train_subjects,train_targets)\n",
        "\n",
        "gcn = GCN(layer_sizes=[8, 8], activations=[\"relu\", \"relu\"], generator=generator, dropout=0.5)\n",
        "\n",
        "x_inp, x_out = gcn.in_out_tensors()\n",
        "\n",
        "predictions = layers.Dense(units=train_targets.shape[1], activation=\"softmax\")(x_out)\n",
        "\n",
        "model = Model(inputs=x_inp, outputs=predictions)\n",
        "model.compile(\n",
        "    optimizer=optimizers.Adam(lr=0.01),\n",
        "    loss=losses.categorical_crossentropy,\n",
        "    metrics=[\"acc\"],\n",
        ")\n",
        "\n",
        "val_gen = generator.flow(val_subjects, val_targets)\n",
        "\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "es_callback = EarlyStopping(monitor=\"val_acc\", patience=50, restore_best_weights=True)\n",
        "\n",
        "history = model.fit(\n",
        "    train_gen,\n",
        "    epochs=100,\n",
        "    validation_data=val_gen,\n",
        "    verbose=2,\n",
        "    shuffle=False,  # this should be False, since shuffling data means shuffling the whole graph\n",
        "    callbacks=[es_callback],\n",
        ")\n",
        "\n",
        "sg.utils.plot_history(history)\n",
        "\n",
        "\n",
        "test_gen = generator.flow(test_subjects, test_targets)\n",
        "test_metrics = model.evaluate(test_gen)\n",
        "print(\"\\nTest Set Metrics:\")\n",
        "for name, val in zip(model.metrics_names, test_metrics):\n",
        "    print(\"\\t{}: {:0.4f}\".format(name, val))\n",
        "    \n",
        "all_nodes = node_subjects\n",
        "all_gen = generator.flow(all_nodes)\n",
        "all_predictions = model.predict(all_gen)\n",
        "\n",
        "node_predictions = target_encoding.inverse_transform(all_predictions.squeeze())\n",
        "\n",
        "df = pd.DataFrame({\"Predicted\": node_predictions, \"True\": node_subjects})\n",
        "\n",
        "\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install stellargraph"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d4e4UcjDn29z",
        "outputId": "e2e80e60-ab14-4ef3-db29-620adacfa9eb"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting stellargraph\n",
            "  Downloading stellargraph-1.2.1-py3-none-any.whl (435 kB)\n",
            "\u001b[K     |████████████████████████████████| 435 kB 5.2 MB/s \n",
            "\u001b[?25hRequirement already satisfied: scikit-learn>=0.20 in /usr/local/lib/python3.7/dist-packages (from stellargraph) (1.0.2)\n",
            "Requirement already satisfied: matplotlib>=2.2 in /usr/local/lib/python3.7/dist-packages (from stellargraph) (3.2.2)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.7/dist-packages (from stellargraph) (1.3.5)\n",
            "Requirement already satisfied: numpy>=1.14 in /usr/local/lib/python3.7/dist-packages (from stellargraph) (1.21.6)\n",
            "Requirement already satisfied: gensim>=3.4.0 in /usr/local/lib/python3.7/dist-packages (from stellargraph) (3.6.0)\n",
            "Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from stellargraph) (1.4.1)\n",
            "Requirement already satisfied: tensorflow>=2.1.0 in /usr/local/lib/python3.7/dist-packages (from stellargraph) (2.8.2+zzzcolab20220527125636)\n",
            "Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.7/dist-packages (from stellargraph) (2.6.3)\n",
            "Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from gensim>=3.4.0->stellargraph) (1.15.0)\n",
            "Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim>=3.4.0->stellargraph) (6.0.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->stellargraph) (1.4.2)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->stellargraph) (3.0.9)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->stellargraph) (0.11.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->stellargraph) (2.8.2)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib>=2.2->stellargraph) (4.2.0)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->stellargraph) (2022.1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20->stellargraph) (3.1.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20->stellargraph) (1.1.0)\n",
            "Requirement already satisfied: tensorflow-estimator<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (2.8.0)\n",
            "Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (3.17.3)\n",
            "Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (1.1.2)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (3.1.0)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (1.14.1)\n",
            "Requirement already satisfied: flatbuffers>=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (2.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (1.1.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (0.2.0)\n",
            "Requirement already satisfied: keras<2.9,>=2.8.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (2.8.0)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (0.26.0)\n",
            "Requirement already satisfied: absl-py>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (1.0.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (3.3.0)\n",
            "Requirement already satisfied: gast>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (0.5.3)\n",
            "Requirement already satisfied: tensorboard<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (2.8.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (57.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (1.6.3)\n",
            "Requirement already satisfied: libclang>=9.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (14.0.1)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow>=2.1.0->stellargraph) (1.46.3)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse>=1.6.0->tensorflow>=2.1.0->stellargraph) (0.37.1)\n",
            "Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py>=2.9.0->tensorflow>=2.1.0->stellargraph) (1.5.2)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (2.23.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (3.3.7)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (1.35.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (0.4.6)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (1.8.1)\n",
            "Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (1.0.1)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (0.6.1)\n",
            "Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (4.2.4)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (0.2.8)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (4.8)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (1.3.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (4.11.4)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (3.8.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (0.4.8)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (1.24.3)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (2022.5.18.1)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (3.0.4)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow>=2.1.0->stellargraph) (3.2.0)\n",
            "Installing collected packages: stellargraph\n",
            "Successfully installed stellargraph-1.2.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "pqDWVfXfnpFm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vslk80FEa1Wn",
        "outputId": "3114c088-f1f4-45d8-da5a-ca598df7a77b"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    }
  ]
}